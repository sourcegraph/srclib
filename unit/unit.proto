syntax = "proto3";
package unit;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;


message Key {
	// Repo is the URI of the repository containing this source unit, if any.
	// The scanner tool does not need to set this field - it can be left blank,
	// to be filled in by the `srclib` tool.
	//
	// If Repo is empty, it indicates that the repository URI is
	// purposefully omitted and this field should be treated as if it
	// doesn't exist. If Repo is set to the unresolved repo sentinel
	// value, then it indicates that repository is unknown, but this
	// field value can be used.
	string Repo = 1;

	// CommitID is the commit ID of the repository containing this
	// source unit, if any. The scanner tool need not fill this in; it
	// should be left blank, to be filled in by the `srclib` tool.
	string CommitID = 2;

	// Version is the unresolved source unit version (e.g., "v1.2.3").
	string Version = 3;

	// Type is the type of source unit this represents, such as "GoPackage".
	string Type = 4;

	// Name is an opaque identifier for this source unit that MUST be unique
	// among all other source units of the same type in the same repository.
	//
	// Two source units of different types in a repository may have the same name.
	// To obtain an identifier for a source unit that is guaranteed to be unique
	// repository-wide, use the ID method.
	string Name = 5;
}

message SourceUnit {
	Key key = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
	Info info = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message Info {
	// Files is all of the files that make up this source unit. Filepaths should
	// be relative to the repository root.
	repeated string Files = 1;

	// Dir is the root directory of this source unit. It is optional and maybe
	// empty.
	string Dir = 2;

	// Dependencies is a list of dependencies that this source unit has. The
	// schema for these dependencies is internal to the scanner that produced
	// this source unit. The dependency resolver is expected to know how to
	// interpret this schema.
	//
	// The dependency information stored in this field should be able to be very
	// quickly determined by the scanner. The scanner should not perform any
	// dependency resolution on these entries. This is because the scanner is
	// run frequently and should execute very quickly, and dependency resolution
	// is often slow (requiring network access, etc.).
	repeated Key Dependencies = 3;

	// Data is additional data dumped by the scanner about this source unit. It
	// typically holds information that the scanner wants to make available to
	// other components in the toolchain (grapher, dep resolver, etc.).
	bytes Data = 4;

	// Config is an arbitrary key-value property map. The Config map from the
	// tree config is copied verbatim to each source unit. It can be used to
	// pass options from the Srcfile to tools.
	//
	// DEPRECATED
	map<string, string> Config = 5;

	// Ops is a deprecated field kept around for backcompat purposes. It
	// can be removed once the "graph-all" option has been removed.
	//
	// DEPRECATED
	map<string, bytes> Ops = 6;
}

message Resolution {
	Key raw = 1 [(gogoproto.nullable) = false];
	Key resolved = 2 [(gogoproto.nullable) = false];
}
